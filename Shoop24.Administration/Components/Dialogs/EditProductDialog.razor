@using Shoop24.Core.Models

<MudDialog Style="background: transparent; box-shadow: none">
	<DialogContent>
		@if (_isDialogOpen)
		{
			<div class="fro-dialog__panel">
				<i class="fro-dialog__icon fro-icon" style="color: orange;">circle-info</i>
				<header class="fro-dialog__header mb-5">@MudDialog.Title</header>
				<article class="fro-dialog__body">
					<h5>@Message</h5>
							
					
					<MudImage Src="@Product.ImageUrl" Width="200" Height="150" Alt="Swedish Farm House" Elevation="25" Class="rounded-lg ma-4"/>
                    						
					<div class="fro-input-group" style="margin-top: 5px;">
						<input
							type="text"
							name="productName"
							id="productName"
							class="fro-input fro-input-group__fro-input"
							placeholder="Produkt Name"
							@bind-value="@Product.Name"/>
					</div>
					<div class="fro-input-group" style="margin-top: 5px;">
                    						<input
                    							type="text"
                    							name="productDesc"
                    							id="produceDesc"
                    							class="fro-input fro-input-group__fro-input"
                    							placeholder="Produkt Beschreibung"
                    							@bind-value="@Product.Description"/>
                    					</div>
					
				</article>
				<footer class="fro-dialog__footer">
					<button @onclick="Cancel"
					        class="fro-button fro-button--secondary fro-button--no-min-width fro-button--small">
						Nein
					</button>
					<button @onclick="Submit" style="background-color: orange;"
					        class="fro-button fro-button--primary fro-button--no-min-width fro-button--small">
						Ja
					</button>
				</footer>
			</div>
		}
	</DialogContent>
</MudDialog>

@code {
	private bool _isDialogOpen = true;
    [CascadingParameter] MudDialogInstance MudDialog { get; set; }

    [Parameter]
    public string Message { get; set; }
    [Parameter]
    public Product Product { get; set; }

    private string _endpoint = string.Empty;
    private string _title = string.Empty;

    protected override Task OnInitializedAsync()
    {
	    return Task.CompletedTask;
    }

    private async Task Submit()
    {
	    await InvokeAsync(StateHasChanged);
        MudDialog.Close(DialogResult.Ok(Product));
    }

    private async Task Cancel()
    {
	    _isDialogOpen = false;
		MudDialog.StateHasChanged();
		MudDialog.Dispose();
	    await InvokeAsync(StateHasChanged);
        MudDialog.Cancel();
    }
}
